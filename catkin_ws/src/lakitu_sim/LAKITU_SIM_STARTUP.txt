SETUP:

	NAVIGATE TO CATKIN_WS/SRC AND "git clone https://github.com/PX4/Firmware.git" to get PX4 ros package
	INSIDE FIRMWARE "git submodule update --init --update"
	THEN RUN: "make posix_sitl_default gazebo"
	GOTO CATKIN_WS AND "catkin_make" (this might take a while the first time)
	//NOTE: PX4 should require no modifications to run properly


LAUNCHING SIMULATOR:

	NAVIGATE TO PX4/FIRMWARE FOLDER
	source ~/catkin_ws/devel/setup.bash
	source Tools/setup_gazebo.bash $(pwd) $(pwd)/build/posix_sitl_default
	export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$(pwd)
	export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$(pwd)/Tools/sitl_gazebo
	
	roslaunch lakitu_sim lakitu_sim.launch //launch file that launches PX4 and a ROS Node with code at /lakitu/script/state_control.py
	
ASSOCIATED FILES:
	
	lakitu/script/state_control.py //the working ros bullshit
	lakitu/urdf/lakitu.urdf //urdf for lakitu, black-magic fuckery plugins from px4(iris)
	lakitu_sim/launch/lakitu_sim.launch //launch file for sim
	px4/Firmware/launch/mavros_posix_sitl.launch //referenced px4 launch file for sim
	
SENDING COMMANDS (format):

	Setting to OFFBOARD MODE (needed for sending velocities):
			"rosservice call /mavros/set_mode 0 "OFFBOARD"" //OFFBOARD DOCUMENTATION: https://docs.px4.io/en/flight_modes/offboard.html
	
	Arming:
			"rosservice call /mavros/cmd/arming [true|false]" //where true|false is armed/isn't armed
			
			//NOTE: both arming and setting to offboard are already implemented in the code, the above is to do so from the command line
	
	Sending Velocities:	
		"rostopic pub /mavros/setpoint_vecity/cmd_vel geometry_msgs/TwistStamped {'header: {stamp: now}, twist: {linear: {x: 1, y: 0, z: 0}}'} -r 60 "
		//where -r 60 is rate in hertz
		
	ROS Topic Commands:
		rostopic list //gives all currently defined topics
		rostopic echo [topic_name] //outputs messages published to [topic_name]
		


	Flipping start switch:

		rostopic pub -l /mavros/rc/in mavros_msgs/RCIn {'channels: [0,0,0,0,0,0,2113,0,0,0,0,0,0,0,0,0,0,0]'}
		
	Publishing flight targets:
	
		rostopic pub -l /lakitu/flight_target geometry_msgs/PoseStamped {'header: {stamp: now},pose: {position: {x: 0,y: 0,z: 5}, orientation: {x: 0,y: 0,z: 0,w: 0}'}} -r 120


	
DOCS:

	MAVROS OFFBOARD control example, written in C++: https://dev.px4.io/en/ros/mavros_offboard.html
	PX4 development guide: https://dev.px4.io/en/
	Github for PX4 Firmware: https://github.com/PX4/Firmware
	
	
				
NOTE: MAY NEED TO DISABLE NAV_RCL_ACT in QGroundControl	(turn off the RC failsafe, not recommended for actual copter)
